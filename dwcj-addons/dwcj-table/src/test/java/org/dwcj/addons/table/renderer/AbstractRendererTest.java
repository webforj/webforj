package org.dwcj.addons.table.renderer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import org.dwcj.addons.table.Table;
import org.dwcj.addons.table.event.renderer.RendererChangeEvent;
import org.dwcj.dispatcher.EventListener;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class AbstractRendererTest {

  Renderer<String> renderer;
  Table<String> table;
  EventListener<RendererChangeEvent> changeListener;

  @BeforeEach
  void setup() {
    table = new Table<>();
    renderer = new Renderer<String>() {
      @Override
      public String build() {
        return "mock";
      }
    };
    changeListener = mock(EventListener.class);
    renderer.onChanged(changeListener);
  }

  @Test
  void shouldHaveAutoGeneratedKey() {
    assertNotNull(renderer.getKey());
  }

  @Test
  void shouldSetTableOnce() {
    renderer.setTable(table);
    assertThrows(IllegalStateException.class, () -> renderer.setTable(table));
  }

  @Test
  void shouldSetGetAttribute() {
    renderer.setAttribute("key", "value");
    assertEquals("value", renderer.getAttribute("key"));
    verify(changeListener).onEvent(any(RendererChangeEvent.class));
  }

  @Test
  void shouldAddParts() {
    renderer.addPart("part1", "part2");
    assertEquals("part1 part2", renderer.getAttribute("part"));
    verify(changeListener).onEvent(any(RendererChangeEvent.class));
  }

  @Test
  void shouldRemoveParts() {
    renderer.addPart("part1", "part2");
    renderer.removePart("part1", "part2");
    assertNull(renderer.getAttribute("part"));
    verify(changeListener, times(2)).onEvent(any(RendererChangeEvent.class));
  }

  @Test
  void shouldNotRemoveNonExistingParts() {
    renderer.addPart("part1", "part2");
    renderer.removePart("nonExistingPart1", "nonExistingPart2");
    assertEquals("part1 part2", renderer.getAttribute("part"));
  }
}
