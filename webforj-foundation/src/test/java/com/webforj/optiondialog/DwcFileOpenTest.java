package com.webforj.optiondialog;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class DwcFileOpenTest {

  DwcFileOpen<?> dialog;
  FileChooserFilter mockFilter1;
  FileChooserFilter mockFilter2;

  @BeforeEach
  void setUp() {
    dialog = spy(new DwcFileOpen<>());
    mockFilter1 = mock(FileChooserFilter.class);
    mockFilter2 = mock(FileChooserFilter.class);
  }

  @Test
  void shouldSetTitle() {
    String title = "Test Title";
    dialog.setTitle(title);
    assertEquals(title, dialog.getTitle());
  }

  @Test
  void shouldSetAndGetFilters() {
    List<FileChooserFilter> filters = Arrays.asList(mockFilter1, mockFilter2);
    dialog.setFilters(filters);
    assertEquals(filters, dialog.getFilters());

    dialog.setFilters(null);
    assertEquals(Collections.emptyList(), dialog.getFilters());
  }

  @Test
  void shouldAddFilter() {
    dialog.setFilters(new ArrayList<>());
    dialog.addFilter(mockFilter1);
    assertTrue(dialog.getFilters().contains(mockFilter1));
  }

  @Test
  void shouldAddFilterWithDescriptionAndPattern() {
    String description = "Description";
    String pattern = "Pattern";
    dialog.setFilters(new ArrayList<>());
    dialog.addFilter(description, pattern);
    assertEquals(description, dialog.getFilters().get(0).getDescription());
    assertEquals(pattern, dialog.getFilters().get(0).getPattern());
  }

  @Test
  void shouldRemoveFilter() {
    List<FileChooserFilter> filters = new ArrayList<>(Arrays.asList(mockFilter1, mockFilter2));
    dialog.setFilters(filters);
    dialog.removeFilter(mockFilter1);
    assertFalse(dialog.getFilters().contains(mockFilter1));
    assertTrue(dialog.getFilters().contains(mockFilter2));
  }

  @Test
  void shouldRemoveFilterByName() {
    when(mockFilter1.getDescription()).thenReturn("Filter1");
    when(mockFilter2.getDescription()).thenReturn("Filter2");

    List<FileChooserFilter> filters = new ArrayList<>(Arrays.asList(mockFilter1, mockFilter2));
    dialog.setFilters(filters);
    dialog.removeFilter("Filter1");
    assertFalse(dialog.getFilters().contains(mockFilter1));
    assertTrue(dialog.getFilters().contains(mockFilter2));
  }

  @Test
  void shouldSetActiveFilter() {
    dialog.setActiveFilter(mockFilter1);
    assertEquals(mockFilter1, dialog.getActiveFilter());
  }

  @Test
  void shouldSetActiveFilterByName() {
    when(mockFilter1.getDescription()).thenReturn("Filter1");
    when(mockFilter2.getDescription()).thenReturn("Filter2");

    List<FileChooserFilter> filters = new ArrayList<>(Arrays.asList(mockFilter1, mockFilter2));
    dialog.setFilters(filters);
    dialog.setActiveFilter("Filter1");
    assertEquals(mockFilter1, dialog.getActiveFilter());

    dialog.setActiveFilter("NonExistentFilter");
    assertNull(dialog.getActiveFilter());
  }
}
