use com.webforj.component.EventProxy
use com.webforj.component.optiondialog.ConfirmDialog
use com.webforj.component.optiondialog.InputDialog
use com.webforj.component.optiondialog.FileChooserDialog
use com.webforj.component.optiondialog.FileUploadDialog
use com.webforj.bridge.WebforjBBjBridge
use java.util.ArrayList
use java.util.Locale

class public BBjEventProxy implements EventProxy

    field private Object obj!
    field private String method!

    method public BBjEventProxy(Object obj!, String method!)
        #obj! = obj!
        #method! = method!
    methodend

    method public void onEvent(BBjEvent ev!)

            rem DWCJ declares certain event callbacks as private to prevent them from
            rem being accessible by users of the API
            rem hence this bridge has to use reflection in order to invoke the event callbacks
            rem after making them accessible
            rem potential improvement: clarify the proxy tpyes to get the method directly and
            rem avoid iterating the whole method list

            o! = #obj!


            l!=  java.util.Arrays.asList(o!.getClass().getDeclaredMethods())
            it! = l!.iterator()
            while it!.hasNext()
                m! = it!.next()
                if m!.getName() = #method! then break
            wend

            m!.setAccessible(BBjAPI.TRUE)

            rem invoke destroy the stack trace!
            rem m!.invoke(o!,ev!)

            rem eval retains the stack trace in case of an error:
            eval("o!."+#method!+"(ev!)")

            methodret

    methodend

classend


class public WebforjHelper implements WebforjBBjBridge

    method public CustomObject getEventProxy(Object obj!, String method!)
        methodret new BBjEventProxy(obj!, method!)
    methodend

    method public CustomObject getEventProxy(Object obj!, String method!, String eventClass!)
        ep! = eval("new "+eventClass!+"(obj!, method!)")
        methodret ep!
    methodend

    method public int msgbox(String msg!, int options!, String title!)
        methodret msgbox(msg!,options!,title!)
    methodend

    method public int msgbox(ConfirmDialog options!)
      REM MSGBOX(str1{,expr{,str2{,button1{,button2{,button3}}}}}{,MODE="options"}{,TIM=int}{,ERR=lineref})
      Title$ = String.valueOf(options!.getTitle())
      Message$ = String.valueOf(options!.getMessage())

      expr = 0, custom = 0

      rem message type
      switch options!.getOptionType().getValue()
        case 0; break
        case 1; expr=1; break
        case 2; expr=2; break
        case 3; expr=3; break
        case 4; expr=4; break
        case 5; expr=5; break
        case 7; expr=7,custom=1; break
        case default; escape
      swend

      rem icon type
      switch options!.getMessageType().getValue()
        case 0; break
        case 16; expr=expr+16; break
        case 32; expr=expr+32; break
        case 48; expr=expr+48; break
        case 64; expr=expr+64; break
        case default; escape
      swend

      rem default selected button
      switch options!.getDefaultButton().getValue()
        case 0; break
        case 256; expr=expr+256; break
        case 512; expr=expr+512; break
        case default; escape
      swend

      rem disable HTML
      if options!.isRawText() then expr=expr+32768

      rem mode
      mode$ = options!.getAttributesAsString()

      rem timeout
      timeout = options!.getTimeout()

      result = 0
      if custom then
        Button1$= String.valueOf(options!.getFirstButtonText())
        Button2$= String.valueOf(options!.getSecondButtonText())
        Button3$= String.valueOf(options!.getThirdButtonText())
        if Button3$ <> "" then
          result = msgbox(Message$,expr,Title$,Button1$,Button2$,Button3$,tim=timeout,mode=mode$)
        else
          if Button2$ <> "" then
              result = msgbox(Message$,expr,Title$,Button1$,Button2$,tim=timeout,mode=mode$)
          else
              if Button1$ <> "" then
                result = msgbox(Message$,expr,Title$,Button1$,tim=timeout,mode=mode$)
              else
                result = msgbox(Message$,expr,Title$,tim=timeout,mode=mode$)
              endif
          endif
        endif
      else
        result = msgbox(Message$,expr,Title$,tim=timeout,mode=mode$)
      endif

      methodret result
    methodend

    method public String prompt(InputDialog options!)
      REM PROMPT(message{,default{,title{,expr}}}{,MODE="options"}{,TIM=int}{,ERR=lineref})
      Message$ = String.valueOf(options!.getMessage())
      Default$ = String.valueOf(options!.getDefaultValue())
      Title$ = String.valueOf(options!.getTitle())

      expr = 0

      rem icon type
      switch options!.getMessageType().getValue()
        case 0; break
        case 16; expr=expr+16; break
        case 32; expr=expr+32; break
        case 48; expr=expr+48; break
        case 64; expr=expr+64; break
        case default; escape
      swend

      rem mode
      mode$ = options!.getAttributesAsString()

      rem timeout
      timeout = options!.getTimeout()

      result! = prompt(Message$,Default$,Title$,expr,tim=timeout,mode=mode$)
      methodret result!
    methodend

    method public String fileChooser(FileChooserDialog options!)
      REM FILEOPEN(prompt,path,name,ext[,filters[,mode[,MODE="CLIENT,EXISTS=option,RESOLVE=option,STYLE=name"]])

      prompt! = String.valueOf(options!.getTitle())
      path! = String.valueOf(options!.getInitialPath())

      filterList! = options!.getFilters()
      it! = filterList!.iterator()
      filter$ = ""
      while it!.hasNext()
        entry! = it!.next()
        filter$ = filter$ + String.valueOf(entry!.getDescription()) + $0a$ + String.valueOf(entry!.getPattern()) + $0a$
      wend

      selectionMode! = options!.getSelectionMode().getValue()
      mode$ = ""
      if(options!.isRestricted()) then
        mode$ = "RESTRICTED,"
      fi
      mode$ = mode$ + options!.getAttributesAsString()

      result! = fileopen(prompt!,path!,"","",filter$,selectionMode!,mode=mode$)
      methodret result!
    methodend

    method public String fileUpload(FileUploadDialog options!)
      REM FILEOPEN(prompt,path,name,ext[,filters[,mode[,MODE="CLIENT,EXISTS=option,RESOLVE=option,STYLE=name"]])

      prompt! = String.valueOf(options!.getTitle())

      filterList! = options!.getFilters()
      it! = filterList!.iterator()
      filter$ = ""
      while it!.hasNext()
        entry! = it!.next()
        filter$ = filter$ + String.valueOf(entry!.getDescription()) + $0a$ + String.valueOf(entry!.getPattern()) + $0a$
      wend

      mode$ = "CLIENT,"
      mode$ = mode$ + options!.getAttributesAsString()

      result! = fileopen(prompt!,"","","",filter$,mode=mode$)
      methodret result!
    methodend

    method public void sleep(int seconds!)
        wait(seconds!)
    methodend

    method public String maskString(String input!, String mask!)
      methodret STR(input!, mask!, err=failed_string_mask)

      failed_string_mask:
      methodret null()
    methodend

    method public String maskNumber(double input!, String mask!)
      methodret STR(input!, mask!, err=failed_number_mask)

      failed_number_mask:
      methodret null()
    methodend

    method public String maskDateTime(int julian!, Double time!, String mask!)
      if time! <> null() then
        methodret DATE(julian!, time!, mask!)
      else
        methodret DATE(julian!, mask!)
      fi

      failed_datetime_mask:
      methodret null()
    methodend

    method public Integer parseDate(String date!, String mask!, Locale locale!)
      methodret JUL(date!, mask!, locale!.toString(), err=failed_parse_date)

      failed_parse_date:
      methodret null()
    methodend

    method public Double parseTime(String time!, String mask!, Locale locale!)
      methodret TIME(time!, mask!, locale!.toString(), err=failed_parse_time)
      failed_parse_time:
      methodret null()
    methodend

    method public BBjControl createWidget(String class!, BBjWindow w!)
        wnd! = w!
        widget! = eval("new "+class!+"(wnd!)")
        methodret widget!
    methodend

    method public java.lang.Object createInstance(java.lang.String classname!)
        createString! = "new "+classname!+"()"
        the_instance! = eval(createString!)

        methodret the_instance!
    methodend

    method public java.lang.Object invokeMethod(java.lang.Object e!, java.lang.String method!, java.util.ArrayList args!)
        cmd! = "e!."+method!+"("
        if args!<>null() AND args!.size()>0 then
          for i=0 to args!.size()-1
              cmd! = cmd! + "args!.get("+str(i)+"),"
          next
          cmd! = cmd!.substring(0,cmd!.length()-1)
        fi
        cmd! = cmd! + ")"
        result!=eval(cmd!)
        methodret result!
    methodend

    method public ArrayList call(String pgm!, ArrayList args!)
        stmt$="CALL """+pgm!+""""
        prep$="ENTER"+$0a$
        for argnum=0 to args!.size()-1
            arg! = args!.get(argnum)
            if arg!.getType()=com.webforj.bbj.BBjVar.BBjGenericType.NUMERIC then
                stmt$=stmt$+",A"+str(argnum)+""
                x$ = "A"+str(argnum)+" = args!.get("+str(argnum)+").getNumVal()"
            fi
            if arg!.getType() = com.webforj.bbj.BBjVar.BBjGenericType.INTEGER then
                    stmt$=stmt$+",A"+str(argnum)+"%"
                    x$ = "A"+str(argnum)+"% = args!.get("+str(argnum)+").getIntVal()"
            fi
            if arg!.getType()= com.webforj.bbj.BBjVar.BBjGenericType.STRING then
                    stmt$=stmt$+",A"+str(argnum)+"$"
                    x$ = "A"+str(argnum)+"$ = args!.get("+str(argnum)+").getStrVal()"
            fi
            if arg!.getType()=com.webforj.bbj.BBjVar.BBjGenericType.OBJECT then
                    stmt$=stmt$+",A"+str(argnum)+"!"
                    x$ = "A"+str(argnum)+"! = args!.get("+str(argnum)+").getObjVal()"
            fi
            prep$=prep$+x$+$0a$
        next

        prep$=prep$+stmt$+$0a$

        rem create prep call program

            f! = java.io.File.createTempFile("pgm_",".bbj")
            f!.deleteOnExit()

            ch=unt
            open (ch,mode="O_CREATE,O_TRUNC")f!.getAbsolutePath()
            print (ch)prep$
            close (ch)
            call f!.getAbsolutePath()
            erase f!.getAbsolutePath()

            ret! = new java.util.ArrayList()
            for argnum=0 to args!.size()-1
                arg! = args!.get(argnum)
                if arg!.getType()=com.webforj.bbj.BBjVar.BBjGenericType.NUMERIC then
                    ret!.add(new com.webforj.bbj.BBjVar(new java.math.BigDecimal(str(neval("A"+str(argnum))))))
                fi
                if arg!.getType() = com.webforj.bbj.BBjVar.BBjGenericType.INTEGER then
                        ret!.add(new com.webforj.bbj.BBjVar(new Integer(neval("A"+str(argnum)+"%"))))
                fi
                if arg!.getType()= com.webforj.bbj.BBjVar.BBjGenericType.STRING then
                        ret!.add(new com.webforj.bbj.BBjVar(seval("A"+str(argnum)+"$")))
                fi
                if arg!.getType()=com.webforj.bbj.BBjVar.BBjGenericType.OBJECT then
                        ret!.add(new com.webforj.bbj.BBjVar(eval("A"+str(argnum)+"!")))
                fi
            next


        methodret ret!
    methodend

    method public String getWorkingDirectory()
        methodret DIR("")
    methodend

    method public String getQueryParam(String key!)
        methodret clientenv(key!,err=no_data)
        no_data:
        methodret null()
    methodend

classend
