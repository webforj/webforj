# Connection retry, default 10 seconds. This is how long the client will wait
# between connections attempts to the server if the client does not have a
# valid connection. i.e. If the client fails to make a valid connection to
# the server this is how long it will wait before trying again. When the
# client is first created or if it looses a valid connection then it will
# attempt to connect immediately and only enter this retry loop if the
# connection attempt fails.
# This is a duration as defined at
# https://github.com/lightbend/config/blob/master/HOCON.md#duration-format
"connection_retry"="10s"
# Connection timeout, default 1 minute. This is how long the connection will
# wait without receiving any network traffic (on both the client and the
# server) before considering the connection dead and closing it. The client
# will send the server a keep alive message (requiring a response) at half
# this interval. i.e. With a timeout a 1 minute the client will send a keep
# alive message to the server every 30 seconds expecting a response.
# This is a duration as defined at
# https://github.com/lightbend/config/blob/master/HOCON.md#duration-format
# The minimum value is 30 seconds and the maximum value is 1 day.
"connection_timeout"="1m"
# Handshake timeout, default 30 seconds. This is how long the client will wait
# for a handshake response from the server before closing the connection.
# Useful if the client accidentally connects to something other than a license
# server. The client will immediately close the connection if the server sends
# something that is not a valid handshake response. This is a duration as
# defined at
# https://github.com/lightbend/config/blob/master/HOCON.md#duration-format
"handshake_timeout"="30s"
# License retry, default 30 seconds. This is how long the client will wait
# between attempts to checkout licenses that are not currently valid. The
# client has a list of failed license checkouts and will re-attempt to check
# them out at this interval. i.e. If a license checkout failed and the client
# is nagging the client will try to stop the nag by retrying the checkout at
# regular intervals.
# This is a duration as defined at
# https://github.com/lightbend/config/blob/master/HOCON.md#duration-format
"license_retry"="30s"
# Default maximum wait time for a checkout to succeed or fail, default 30
# seconds. The API allows the client to determine the maximum wait time on a
# case-by-case basis, if a user does not define a maximum wait time then it
# uses this configuration. Checking out a license, succeed or fail, is
# generally almost instant. However, if there is an issue connecting to the
# server, for example the server is not running, then this is the maximum
# amount of time the client will wait for the connection before declaring the
# checkout failed. It puts an upper limit of how long a user will need to wait
# before getting a definitive answer from the client about the success or
# failure of the checkout.
# This is a duration as defined at
# https://github.com/lightbend/config/blob/master/HOCON.md#duration-format
"max_wait"="5s"
# License server port to connect to, default 27000. As a port number this is a
# positive integer.
port=27000
# List of license servers to connect to, each may optionally configure a
# different port (overriding the default port configuration):
#   servers: [
#     {
#       host: "server1",
#       port: 27000
#     },
#     {
#       host: "server2",
#       port: 27000
#     }
#   ]
# If all of the license servers are using the default port configuration then
# servers can just be a list of host strings:
#   servers: [
#     "server1",
#     "server2"
#   ]
# If multiple servers are listed then the client will try to connect to each of
# them in order, stopping on the first successful connection. The purpose of
# this is to allow backup license servers. If the primary server ("server1")
# goes down then the client will loose its connection. When trying to establish
# a new connection it will first attempt to connect to the primary server
# ("server1"), when that fails (because the server is down) it will then try to
# connect to the second server ("server2"). Any time it needs to establish a
# connection, either when it looses its connection or on initial startup, it
# will repeat this process to establish a server connection.
servers=[
    {
        host=license.webforj.com
    }
]

info: {
    token: "your_token_here",
}